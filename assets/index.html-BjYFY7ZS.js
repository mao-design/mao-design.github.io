import{_ as i,c as a,a as n,o as l}from"./app-CNIuUWnT.js";const e="/assets/%E7%BB%A7%E6%89%BF-CnHDNhmI.png",t="/assets/%E7%BB%A7%E6%89%BF%E7%BB%93%E6%9E%84%E5%9B%BE-BosuGk6p.png",p="/assets/%E5%9C%A8%E4%B8%8D%E5%90%8C%E5%8C%85%E4%B8%AD%E7%BB%A7%E6%89%BF-CXMoEiT4.png",h="/assets/%E7%BB%A7%E6%89%BF%E7%BB%86%E8%8A%82-D4COvuu3.png",k={};function d(r,s){return l(),a("div",null,s[0]||(s[0]=[n('<h2 id="继承" tabindex="-1"><a class="header-anchor" href="#继承"><span>继承</span></a></h2><p>继承说白了就是建立查找关系</p><p><img src="'+e+'" alt=""></p><p><img src="'+t+'" alt=""></p><h3 id="继承的好处" tabindex="-1"><a class="header-anchor" href="#继承的好处"><span>继承的好处</span></a></h3><ol><li>代码的复用性提高了</li><li>代码的扩展性和维护性提高了</li></ol><h3 id="继承的注意事项" tabindex="-1"><a class="header-anchor" href="#继承的注意事项"><span>继承的注意事项</span></a></h3><ol><li><p>子类继承了父类的所有属性和方法，子类可以直接访问非私有的属性和方法，子类不能直接访问私有的属性和方法，要想访问私有的属性和方法则需要通过父类提供的公共的方法去访问</p></li><li><p>遇到无法调用的类时需要用公开的类来间接性调用</p></li><li><p>主方法（main方法）中不能直接调用父类中的属性和方法</p></li><li><p>如果子类所继承的父类不在同一个包下，则需要导包（<code>import</code>），把父类所在的 完整的包地址导包到自己的子类中<img src="'+p+`" alt=""></p></li><li><p>总结：公开类无论在什么地方都可以被调用（在别的包中调用公开类要记得导入该类的包）</p><div class="language-java line-numbers-mode has-collapsed collapsed" data-ext="java" data-title="java" style="--vp-collapsed-lines:15;"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Test</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Demo01</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 自定义方法</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> info</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        // 使用父类中的属性</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">a = </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> a </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> b = </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> b </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> c = </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//		 主方法中不能直接使用父类的属性，只能通过对象调用</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//        创建Demo02对象</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        Demo02</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> demo02</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> Demo02</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">//        调用demo02下的info方法</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        demo02</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">info</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div></li><li><p><strong>默认类只能在本包中使用，本包的子类可以直接调用默认类，别的包中的子类不能直接调用默认类</strong></p></li><li><p>调用子类中的调用的属性时，会优先在子类中查找该属性，如果子类中没有则在父类中查找，如果父类中也没有，则继续在父类的父类中查找，直到找到为止，如果实在没有就会报错</p></li><li><p>在找的过程中如果找到了所对应的属性值，则会返回该值，并停止继续往下找，注意：尽管该值是一个私有的属性，也会停止，只要找到就停止，不管父类中有没有，但是找到私有的属性会报错</p><div class="language-java line-numbers-mode has-collapsed collapsed" data-ext="java" data-title="java" style="--vp-collapsed-lines:15;"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Test</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">        a a1 </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> new</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">a1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">a1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  // 输出 10</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">a1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 报错，因为 b 类中的 a 是私有的，所以会报错并且不会继续往下一个父类中查找</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> a</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> b </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 10</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> b</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> extends</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> c </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	private</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 20</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> c</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 30</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div><p><strong>在继承中，我们要调用属性和方法时，会优先从子类中调用属性和方法（注意：构造器则是优先调用父类中的构造器），如果子类中没有，则去父类中调用，依次类推</strong></p></li><li><p>子类最多只能继承一个父类，因为Java是单继承机制，所以如何让子类继承多个类？</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>举个例子</span></span>
<span class="line"><span>有三个类（A、B、C）</span></span>
<span class="line"><span>A继承B，B在继承C，这样A就可以使用C的属性和方法</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>不能滥用继承，子类和父类必须满足<code>is-a</code>的逻辑</p><div class="language- line-numbers-mode" data-ext="" data-title=""><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span>举个例子</span></span>
<span class="line"><span>A类表示的是动物</span></span>
<span class="line"><span>B类表示的是猫</span></span>
<span class="line"><span>猫是动物</span></span>
<span class="line"><span>所以 B 类就可以继承 A 类</span></span>
<span class="line"><span></span></span>
<span class="line"><span>A类表示的音乐</span></span>
<span class="line"><span>B类表示的是小狗</span></span>
<span class="line"><span>小狗不是音乐</span></span>
<span class="line"><span>所以 B 类就不可以继承 A 类</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h2 id="继承细节" tabindex="-1"><a class="header-anchor" href="#继承细节"><span>继承细节</span></a></h2><p><img src="`+h+'" alt=""></p><ol><li><strong>调用子类的构造器时会优先调用父类的无参构造器</strong></li><li><strong>调用子类中的属性或方法时会优先调用子类中的属性和方法，如果子类中没有该属性或方法时再到父类中查找，直到找到为止，如果都没有则会报错</strong></li><li>每个类中都会有一个默认的无参构造器，只是默认不显示而已，在继承中，构造器里面都会有一个默认的 <code>super();</code> 语句，也是默认不显示，所以当我们调用子类的构造器时，则会优先调用父类里的无参构造器；如果此时父类中有别的有参构造器，那么那个有参构造器就会替换掉默认的无参构造器，所以此时你调用子类的构造器会报错，这时候就需要你使用 <code>super()</code> 语句来指定父类中的构造器，这样才不会报错</li><li><strong>父类不能调用子类中的属性以及方法，但是子类可以调用父类中的属性以及方法（但是也要遵守访问修饰符的权限）</strong>，除非使用多态这样父类才可以使用子类中的方法（这些方法是子类和父类共有的，就是父类有的方法子类也有，也就是重写），子类的属性则需要使用多态里面向下转型才可以调用</li></ol>',11)]))}const g=i(k,[["render",d],["__file","index.html.vue"]]),o=JSON.parse('{"path":"/java/afbrnt45/","title":"继承","lang":"zh-CN","frontmatter":{"title":"继承","createTime":"2025/10/03 11:54:26","permalink":"/java/afbrnt45/","description":"继承 继承说白了就是建立查找关系 继承的好处 代码的复用性提高了 代码的扩展性和维护性提高了 继承的注意事项 子类继承了父类的所有属性和方法，子类可以直接访问非私有的属性和方法，子类不能直接访问私有的属性和方法，要想访问私有的属性和方法则需要通过父类提供的公共的方法去访问 遇到无法调用的类时需要用公开的类来间接性调用 主方法（main方法）中不能直接调...","head":[["meta",{"property":"og:url","content":"https://mao-design.pages.dev/java/afbrnt45/"}],["meta",{"property":"og:site_name","content":"Mao-Design的博客"}],["meta",{"property":"og:title","content":"继承"}],["meta",{"property":"og:description","content":"继承 继承说白了就是建立查找关系 继承的好处 代码的复用性提高了 代码的扩展性和维护性提高了 继承的注意事项 子类继承了父类的所有属性和方法，子类可以直接访问非私有的属性和方法，子类不能直接访问私有的属性和方法，要想访问私有的属性和方法则需要通过父类提供的公共的方法去访问 遇到无法调用的类时需要用公开的类来间接性调用 主方法（main方法）中不能直接调..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-12T16:48:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-12T16:48:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"继承\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-12T16:48:38.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":4.2,"words":1259},"git":{"updatedTime":1757695718000,"contributors":[{"name":"mao-design","email":"2781406006@qq.com","commits":2,"avatar":"https://avatars.githubusercontent.com/mao-design?v=4","url":"https://github.com/mao-design"}]},"autoDesc":true,"filePathRelative":"notes/Java/Java整理/20.继承.md","bulletin":false}');export{g as comp,o as data};
