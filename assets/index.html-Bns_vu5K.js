import{_ as s,c as a,a as t,o as n}from"./app-CNIuUWnT.js";const e="/assets/main%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8%E7%BB%86%E8%8A%821-CmMxPhYD.png",l="/assets/idea%E7%A8%8B%E5%BA%8F%E6%89%A7%E8%A1%8C%E5%8F%82%E6%95%B0-DW0LieRN.png",p={};function h(k,i){return n(),a("div",null,i[0]||(i[0]=[t('<p><img src="'+e+`" alt=""></p><ol><li><p><code>String[] args</code> 是一个<code>String</code>类型的一维数组，在执行运行命令时，运行命令后面输入的内容将传到<code>args</code>变量中，多个参数需要用空格隔开</p><p>命令行添加：</p><div class="language-java line-numbers-mode" data-ext="java" data-title="java"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	public</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> static</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> main</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">String</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[]</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">		for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> =</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">length</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">++</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">			System</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">out</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">println</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">((</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">+</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> args = </span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> +</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> args</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">		}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">	}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>IDEA程序参数设置页面：<img src="`+l+'" alt=""></p></li><li><p>Java虚拟机和我们的程序不在同一个类中，而Java虚拟机要调用我们的主程序，那么我们的主程序则必须是<code>public</code> 类型的</p></li><li><p>Java虚拟机运行主方法，成功就是成功，失败就是失败，所以不需要返回值，所以主方法中的返回值就是 <code>void</code></p></li><li><p>主方法是一个静态方法，所以使用的注意细节和静态方法的规则一致，可以调用静态的变量以及方法，但是不能调用非静态的变量以及方法（除非创建一个对象，通过对象调用）</p></li></ol>',2)]))}const d=s(p,[["render",h],["__file","index.html.vue"]]),g=JSON.parse('{"path":"/java/uhvakyw5/","title":"main方法细节","lang":"zh-CN","frontmatter":{"title":"main方法细节","createTime":"2025/10/03 11:54:26","permalink":"/java/uhvakyw5/","description":"String[] args 是一个String类型的一维数组，在执行运行命令时，运行命令后面输入的内容将传到args变量中，多个参数需要用空格隔开 命令行添加： IDEA程序参数设置页面： Java虚拟机和我们的程序不在同一个类中，而Java虚拟机要调用我们的主程序，那么我们的主程序则必须是public 类型的 Java虚拟机运行主方法，成功就是成功，...","head":[["meta",{"property":"og:url","content":"https://mao-design.pages.dev/java/uhvakyw5/"}],["meta",{"property":"og:site_name","content":"Mao-Design的博客"}],["meta",{"property":"og:title","content":"main方法细节"}],["meta",{"property":"og:description","content":"String[] args 是一个String类型的一维数组，在执行运行命令时，运行命令后面输入的内容将传到args变量中，多个参数需要用空格隔开 命令行添加： IDEA程序参数设置页面： Java虚拟机和我们的程序不在同一个类中，而Java虚拟机要调用我们的主程序，那么我们的主程序则必须是public 类型的 Java虚拟机运行主方法，成功就是成功，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-12T16:48:38.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-12T16:48:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"main方法细节\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-12T16:48:38.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":0.96,"words":288},"git":{"updatedTime":1757695718000,"contributors":[{"name":"mao-design","email":"2781406006@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/mao-design?v=4","url":"https://github.com/mao-design"}]},"autoDesc":true,"filePathRelative":"notes/Java/Java整理/45.main方法细节.md","bulletin":false}');export{d as comp,g as data};
