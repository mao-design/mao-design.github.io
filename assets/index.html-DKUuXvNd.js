import{_ as i,c as e,a,o as l}from"./app-CNIuUWnT.js";const n={};function t(d,s){return l(),e("div",null,s[0]||(s[0]=[a(`<h2 id="dockerfile" tabindex="-1"><a class="header-anchor" href="#dockerfile"><span>Dockerfile</span></a></h2><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 基于centos</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> centos</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 设置环境目录</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ENV</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> MYPATH /usr/local</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 设置工作目录，就是进入终端之后默认进入的目录</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WORKDIR</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> $MYPATH</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 下载软件</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">RUN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> yum -y install vim</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 映射端口</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">EXPOSE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 8080:80</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-bash line-numbers-mode" data-ext="bash" data-title="bash"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">root@hadoop01 dockerDemo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"># docker build -f Dockerfile文件名 -t 自定义镜像名:自定义版本号 </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">root@hadoop01 dockerDemo</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"># docker build -f Dockerfile -t nginx66:0.1 </span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">.</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-from" tabindex="-1"><a class="header-anchor" href="#_1-from"><span><strong>1. FROM</strong></span></a></h3><p><strong>作用</strong>：指定基础镜像，是 Dockerfile 的必需首行指令。 <strong>语法</strong>：</p><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> &lt;image&gt;[:&lt;tag&gt;] [</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">AS</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> &lt;name&gt;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> python:3.9-slim-buster  # 使用Python官方轻量级镜像</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>最佳实践 <ul><li>使用官方镜像或经过验证的第三方镜像。</li><li>始终指定标签（如<code>python:3.9</code>），避免使用<code>latest</code>导致版本不稳定。</li><li>使用<code>AS</code>为阶段命名，支持多阶段构建（如<code>AS builder</code>）。</li></ul></li></ul><h3 id="_2-label" tabindex="-1"><a class="header-anchor" href="#_2-label"><span><strong>2. LABEL</strong></span></a></h3><p>作者信息，名字+邮箱</p><p><strong>语法</strong>：</p><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">LABEL</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> maintainer=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;John Doe &lt;john@example.com&gt;&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><p>扩展标签</p><p>可添加更多镜像信息。</p><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">LABEL</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> version=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;1.0&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> description=</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;My application&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul><h3 id="_3-run" tabindex="-1"><a class="header-anchor" href="#_3-run"><span><strong>3. RUN</strong></span></a></h3><p><strong>作用</strong>：在构建镜像时执行命令，常用于安装软件或配置环境。 <strong>两种形式</strong>：</p><ul><li><p>shell 形式</p><p>直接执行命令（默认使用<code>/bin/sh -c</code>）</p><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">RUN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> apt-get update &amp;&amp; apt-get install -y python3-pip</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>exec 形式</p><p>以数组形式执行命令，避免 shell 解析。</p><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">RUN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;pip&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;install&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;flask&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>最佳实践</p><ul><li><p>合并多条命令以减少镜像层数（如<code>&amp;&amp;</code>连接）。</p></li><li><p>清理临时文件以减小镜像体积：</p><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">RUN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> apt-get update &amp;&amp; apt-get install -y python3-pip \\</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    &amp;&amp; rm -rf /var/lib/apt/lists/*  # 清除APT缓存</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="_4-add" tabindex="-1"><a class="header-anchor" href="#_4-add"><span><strong>4. ADD</strong></span></a></h3><p><strong>作用</strong>：复制文件或目录到镜像中，支持 URL 和自动解压。 <strong>语法</strong>：</p><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ADD</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> &lt;src&gt;... &lt;dest&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ADD</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> app.tar.gz /app/  # 自动解压tar文件</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ADD</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> https://example.com/file.txt /tmp/  # 下载远程文件</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>最佳实践 <ul><li>优先使用<code>COPY</code>，因为<code>ADD</code>的解压和远程下载功能可能导致意外行为。</li><li>避免从 URL 下载大文件，改用<code>RUN wget</code>或<code>curl</code>以便清理临时文件。</li></ul></li></ul><h3 id="_5-copy" tabindex="-1"><a class="header-anchor" href="#_5-copy"><span><strong>5. COPY</strong></span></a></h3><p><strong>作用</strong>：复制文件或目录到镜像中，更透明且推荐使用。 <strong>语法</strong>：</p><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">COPY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [--chown=&lt;user&gt;:&lt;group&gt;] &lt;src&gt;... &lt;dest&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">COPY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> requirements.txt /app/  # 复制本地文件</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">COPY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> --chown=appuser:appuser src/ /app/  # 指定文件所有者</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>最佳实践</p><ul><li><p>使用<code>.dockerignore</code>文件排除不需要的文件（如<code>.git</code>、<code>node_modules</code>）。</p></li><li><p>遵循 “依赖优先复制” 原则，减少缓存失效：</p><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">COPY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> requirements.txt /app/  # 先复制依赖文件</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">RUN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> pip install -r requirements.txt  # 缓存此层</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">COPY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> . /app/  # 最后复制应用代码</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="_6-env" tabindex="-1"><a class="header-anchor" href="#_6-env"><span><strong>6. ENV</strong></span></a></h3><p><strong>作用</strong>：设置环境变量，可在后续指令中使用。 <strong>语法</strong>：</p><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ENV</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> &lt;key&gt;=&lt;value&gt; ...</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ENV</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> PYTHONUNBUFFERED=1  # 禁用Python输出缓冲</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ENV</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> APP_PORT=8080 DB_HOST=localhost</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>最佳实践 <ul><li>用于设置不变的环境变量（如配置参数）。</li><li>敏感信息（如密码）建议通过<code>docker run --env</code>传递，而非硬编码在 Dockerfile 中。</li></ul></li></ul><h3 id="_7-workdir" tabindex="-1"><a class="header-anchor" href="#_7-workdir"><span><strong>7. WORKDIR</strong></span></a></h3><p><strong>作用</strong>：设置工作目录，后续指令的相对路径以此为基准。 <strong>语法</strong>：</p><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WORKDIR</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> /path/to/dir</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WORKDIR</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> /app</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">RUN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> pip install -r requirements.txt  # 在/app目录执行</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">CMD</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;python&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;app.py&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">]  # 运行/app/app.py</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>最佳实践 <ul><li>使用绝对路径，避免路径歧义。</li><li>若目录不存在，<code>WORKDIR</code>会自动创建。</li></ul></li></ul><h3 id="_8-volume" tabindex="-1"><a class="header-anchor" href="#_8-volume"><span><strong>8. VOLUME</strong></span></a></h3><p><strong>作用</strong>：创建挂载点，用于数据持久化或容器间共享。 <strong>语法</strong>：</p><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">VOLUME</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;/data&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">VOLUME</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> /var/log/app  # 挂载日志目录</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>注意事项 <ul><li>挂载点在运行时由 Docker 管理，镜像构建时无法操作其中的内容。</li><li>建议在<code>docker run</code>时通过<code>-v</code>或<code>--mount</code>参数显式挂载，而非依赖 Dockerfile 中的<code>VOLUME</code>。</li></ul></li></ul><h3 id="_9-expose" tabindex="-1"><a class="header-anchor" href="#_9-expose"><span><strong>9. EXPOSE</strong></span></a></h3><p><strong>作用</strong>：声明容器运行时监听的端口，仅作文档用途，不实际映射端口。 <strong>语法</strong>：</p><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">EXPOSE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> &lt;port&gt; [&lt;port&gt;/&lt;protocol&gt;]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">EXPOSE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 8080/tcp  # 声明HTTP服务端口</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">EXPOSE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 5432/udp  # 声明UDP端口</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>最佳实践 <ul><li>配合<code>docker run -p</code>或<code>docker-compose.yml</code>中的端口映射使用。</li><li>支持多个端口声明（如<code>EXPOSE 80 443</code>）。</li></ul></li></ul><h3 id="_10-cmd" tabindex="-1"><a class="header-anchor" href="#_10-cmd"><span><strong>10. CMD</strong></span></a></h3><p><strong>作用</strong>：设置容器启动时的默认命令，若有多个<code>CMD</code>，仅最后一个生效。 <strong>三种形式</strong>：</p><ul><li><p>exec 形式（推荐）</p><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">CMD</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;python&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;app.py&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">]  # 直接执行命令</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当运行容器的时候会在容器里面执行 <code>pyhton app.py</code></p></li><li><p>shell 形式</p><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">CMD</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> python app.py  # 通过shell执行，可能导致信号处理问题</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当运行容器的时候会在容器里面执行 <code>pyhton app.py</code></p></li><li><p>作为<code>ENTRYPOINT</code>的默认参数</p><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ENTRYPOINT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;python&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;app.py&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">]</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">CMD</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;--host=0.0.0.0&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">]  # 此参数会传递给ENTRYPOINT</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>最佳实践</p><ul><li><p>使用 exec 形式避免 shell 包装，确保进程接收 Docker 的信号（如<code>SIGTERM</code>）。</p></li><li><p>若需运行多个命令，可封装为脚本并执行：</p><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">CMD</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;/scripts/start.sh&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ul><h3 id="_11-entrypoint" tabindex="-1"><a class="header-anchor" href="#_11-entrypoint"><span><strong>11. ENTRYPOINT</strong></span></a></h3><p><strong>作用</strong>：配置容器启动时的执行命令，与<code>CMD</code>配合可实现参数化。 <strong>两种形式</strong>：</p><ul><li><p>exec 形式（推荐）</p><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ENTRYPOINT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;python&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;app.py&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">]</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">CMD</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;--port=8080&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">]  # 默认参数，可被docker run覆盖</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>shell 形式</p><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ENTRYPOINT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> python app.py  # 会忽略CMD和docker run的参数</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>示例</p><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ENTRYPOINT</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;python&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;app.py&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">]  # 固定命令</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 运行时可覆盖参数：docker run myimage --port=8000</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>最佳实践</p><ul><li>使用 exec 形式，允许通过<code>docker run --entrypoint</code>覆盖。</li><li>常用于封装可执行程序（如数据库客户端、CLI 工具）。</li></ul></li></ul><h3 id="_12-onbuild" tabindex="-1"><a class="header-anchor" href="#_12-onbuild"><span><strong>12. ONBUILD</strong></span></a></h3><p><strong>作用</strong>：设置触发器，当该镜像被其他镜像用作基础镜像时执行。</p><p><code>ONBUILD</code>指令的作用是为<strong>基础镜像</strong>添加触发器，当其他镜像通过<code>FROM</code>指令继承该基础镜像时，这些触发器会被自动执行。</p><p><strong>语法</strong>：</p><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">ONBUILD &lt;INSTRUCTION&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-dockerfile line-numbers-mode" data-ext="dockerfile" data-title="dockerfile"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ONBUILD</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> COPY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> . /app</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ONBUILD</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> RUN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> pip install -r requirements.txt</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>最佳实践 <ul><li>用于创建可复用的基础镜像（如应用框架镜像）。</li><li>避免在<code>ONBUILD</code>中使用<code>ADD</code>、<code>COPY</code>等依赖上下文的指令，可能导致构建失败。</li></ul></li></ul><h3 id="完整示例" tabindex="-1"><a class="header-anchor" href="#完整示例"><span><strong>完整示例</strong></span></a></h3><p>以下是一个 Python Flask 应用的 Dockerfile 示例：</p><div class="language-dockerfile line-numbers-mode has-collapsed collapsed" data-ext="dockerfile" data-title="dockerfile" style="--vp-collapsed-lines:15;"><button class="copy" title="复制代码" data-copied="已复制"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 基础镜像</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">FROM</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> python:3.9-slim-buster</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 设置工作目录</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">WORKDIR</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> /app</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 安装依赖</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">COPY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> requirements.txt .</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">RUN</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> pip install --no-cache-dir -r requirements.txt</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 复制应用代码</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">COPY</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> . .</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 设置环境变量</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ENV</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> FLASK_APP=app.py</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">ENV</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> FLASK_ENV=production</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 暴露端口</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">EXPOSE</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> 5000</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"># 定义启动命令</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">CMD</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> [</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;flask&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;run&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">, </span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">&quot;--host=0.0.0.0&quot;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div><div class="collapsed-lines"></div></div>`,62)]))}const r=i(n,[["render",t],["__file","index.html.vue"]]),h=JSON.parse('{"path":"/docker/nei18htd/","title":"Dockerfile","lang":"zh-CN","frontmatter":{"title":"Dockerfile","createTime":"2025/10/03 11:54:26","permalink":"/docker/nei18htd/","description":"Dockerfile 1. FROM 作用：指定基础镜像，是 Dockerfile 的必需首行指令。 语法： 最佳实践 使用官方镜像或经过验证的第三方镜像。 始终指定标签（如python:3.9），避免使用latest导致版本不稳定。 使用AS为阶段命名，支持多阶段构建（如AS builder）。 2. LABEL 作者信息，名字+邮箱 语法： 扩展标...","head":[["meta",{"property":"og:url","content":"https://mao-design.pages.dev/docker/nei18htd/"}],["meta",{"property":"og:site_name","content":"Mao-Design的博客"}],["meta",{"property":"og:title","content":"Dockerfile"}],["meta",{"property":"og:description","content":"Dockerfile 1. FROM 作用：指定基础镜像，是 Dockerfile 的必需首行指令。 语法： 最佳实践 使用官方镜像或经过验证的第三方镜像。 始终指定标签（如python:3.9），避免使用latest导致版本不稳定。 使用AS为阶段命名，支持多阶段构建（如AS builder）。 2. LABEL 作者信息，名字+邮箱 语法： 扩展标..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-28T18:10:09.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-28T18:10:09.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Dockerfile\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-28T18:10:09.000Z\\",\\"author\\":[]}"]]},"headers":[],"readingTime":{"minutes":4.88,"words":1465},"git":{"updatedTime":1748455809000,"contributors":[{"name":"mao-design","email":"2781406006@qq.com","commits":1,"avatar":"https://avatars.githubusercontent.com/mao-design?v=4","url":"https://github.com/mao-design"}]},"autoDesc":true,"filePathRelative":"notes/docker/3.Dockerfile.md","bulletin":false}');export{r as comp,h as data};
